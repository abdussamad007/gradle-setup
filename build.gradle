plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'java'
  id 'jacoco' // added the jococo code coverage plugin.
  id 'groovy' // added groovy plugin to write test cases in groovy.

}

group = 'com.abdus.tutorial'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

/*repositories {
	mavenCentral()
}*/

repositories {
  jcenter()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-groovy-templates'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
  implementation 'org.codehaus.groovy:groovy-all:2.4.15'
  testImplementation 'org.codehaus.groovy:groovy-all:2.4.15'

  testCompile(
    'junit:junit:4.12',
    'org.codehaus.groovy:groovy-all:2.4.15',
    'org.spockframework:spock-core:1.0-groovy-2.4'
  )

  testRuntime(
    'com.athaydes:spock-reports:1.2.7'
  )

}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

sourceSets { // added this whole block for writing test cases in groovy
  main {
    groovy {
      srcDirs = ['src/groovy']
    }
  }

  test {
    groovy {
      srcDirs = ['test/groovy']
    }



  }
}

test {
  jacoco {
    enabled = true
    destinationFile = file("$buildDir/jacoco/${name}.exec")
    includes = []
    excludes = []
    excludeClassLoaders = []
    includeNoLocationClasses = false
    sessionId = "<auto-generated value>"
    dumpOnExit = true
    classDumpDir = null
    output = JacocoTaskExtension.Output.FILE
    address = "localhost"
    port = 8082
    jmx = false
  }
}

jacoco { // configure jococo plugin
  toolVersion = "0.8.5"
  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
    html.destination file("${buildDir}/jacocoHtml")
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 0.5
      }
    }

    rule {
      enabled = false
      element = 'CLASS'
      includes = ['org.gradle.*']

      limit {
        counter = 'LINE'
        value = 'TOTALCOUNT'
        maximum = 0.3
      }
    }
  }
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}
